

// Note on variables
// $name will be substituted by substitution text
// $$name will however print $name as output

// Variables:
// Global
// config_scan_dir Scan Directory
// config_build_dir
// config_sdk_dir
// config_frameworks_dir
// config_runtime_dir
// config_download_dir

// Under Module
// framework_dir
// framework_name
// module_dir
// module_name

config_filter (about = "list of [debug, release, windows, linux, osx, clang, msvc, gcc, asan]");

out_dir        = (about = "Output directory");
sdk_dir        = (about = "Package install directory");
build_dir      = (about = "Build directory");
frameworks_dir = (about = "Frameworks directory");
runtime_dir    = (about = "Output directory for debugging/testing");
download_dir   = (about = "Directory to download sources");
static_libs    = (about = "Build all as static libs (Except plugins)");
preset (about = "Define a preset",
          params = ["first is name, second is list of @config_filter"])
{
  define (about = "List of definitions to add to this config", params="First is name, second is value");
  description (about = "Preset desc");
  display_name (about = "Descriptive name");
  compiler_flags (about = "Compile flags");
  linker_flags (about = "Compile flags");
}

framework(about = "Framework level declaration, can exclude modules",
          variables = ["$framework.dir : Current framework source path", "$framework.name : Current framework name"])
{
  excludes (about = "List of modules to exclude from build in this framework");
}

// module (about = "Defines a module, the top level description of a module starts with module",
        //variables = ["$module.dir : Absolute path to the Module folder in source/Frameworks/Framework directory", "$module.name : Current module name"])


//{
  type (about = "Module types", params = "Any of plugin|lib|ref|exe|extern|data");
  var (about = "Declares configuration variables that are only defined if configuration definition is satisfied",
       params = ["list of @config_filter, more configs will be added as seen fit"])
  {
    any (about = "Key value pairs, the value can be a string or a list, keys can be fetched by $var.key. Lists are expanded by default. To avoid expansion, use [$var.key]",
         params = ["Value can be any string/list/any valid neoscript param value"]);
  }

  prebuild (about = "Prebuild steps for this module")
  {
    artifacts (about = "List of files produced as artifacts to this build. If element names dont start with $ (followed by a var name) it is assumed the paths are relative to gen directory");
    dependencies (about = "List of files that this step depends on. If element names dont start with $ (followed by a var name) it is assumed the paths are relative to gen directory");
    check_deps (about = "Boolean. Skip if dependencies are not present");
    steps (about = "Commands to build the artifacts.")
    {
      cmake;
      trace;
      print;
      copy;
      copy_dir;
    }
  }

  postbuild (about = "Postbuild steps for this module, see @prebuild. Postbuild does not support dependencies.");
  
  fetch (about = "Starts a fetch operation. This will fetch code from repository and add checkout modules and sumboudles given a commit, from build instructions it will add build targets to the module",
         params = "First parameter should be repository",
         variables = [
           "$fetch_bulid_dir : Build dir",
           "$fetch_src_dir : Source directory where repository was fetched",
           "$fetch_sdk_dir : Directory where built repository is installed, this is not the same as interface.install unless specified"
         ])
  {
    license (about = "License file of the external module, this will be added to the generated external license file", params = ["License file"]);
    commit (about = "The commit hash to checkout", params = ["Commit sha256"]);
    args (about = "CMake args to pass to cmake build, should be a string list", 
          params = ["Filter with list of filter params, see @config_filter"]);
    package (about = "A package to find");
    components (about= "List of components to find");
    runtime_loc (about = "Location where runtime files are generated, they will be copied accordingly");
    runtime_files (about = "Regex of files that are copied (according to subdirectories) into runtime_dir");
  }

  public (about =  "Defines the export public interface for the module, everything here will be used as public/interface property of this target", 
             params = "Filter with list of filter params, see @config_filter")
  {
    dependencies (about = "List of module targets of the form Framework.moduleName, that this module depends on");
    binaries (about = "Binaries to be copied in install directory",
              params = (path = "Location from you want to copy the binaries", 
                        "List of files will be copied, if none is provided every binary file will be copied"));
                            
    includes (about = "Include directories to be a part of this module interface, they will be copied during install, if this is not an extern module",
             note = "Include is optional and only meant for extern modules");


    libraries (about = "Libs to be part of this module interface, which will be automatically linked to by modules depending on this module",
               params = (path = "Location from you want to copy the libs", 
                         type = "Can be static/shared/system, by default is shared",
                         "List or a single link target, list will be expanded"));

    define (about = "List of definitions to add to this config", params="First is name, second is value");

  }

  plugin (about = "Plugin meta info")
  {
    description (about = "description");
    company (about = "Company.");
    author (about = "Author of plugin");
    type_id (about ="none|any string that classifies the plugin");
    compatibility (about = "Max compatible version");
    context (about = "(base|engine|project)");
    optional (about = "Boolean");
    service (params = "First parameter is service name, second should be impl");
  }

  private (about = "Same as interface, but properties will not be transitive, only direct linking recieve the properties");
  exports (about = "Cache variables to be exported by this module")
  {
    any (about = "Key value pairs",
         params = ["Value should be a string"]);
  }

//}